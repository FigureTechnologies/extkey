// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: eckey.proto

package eckey

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type KeyType int32

const (
	KeyType_ELLIPTIC KeyType = 0
)

var KeyType_name = map[int32]string{
	0: "ELLIPTIC",
}

var KeyType_value = map[string]int32{
	"ELLIPTIC": 0,
}

func (x KeyType) String() string {
	return proto.EnumName(KeyType_name, int32(x))
}

func (KeyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d591696710d15b62, []int{0}
}

type KeyCurve int32

const (
	KeyCurve_SECP256K1 KeyCurve = 0
)

var KeyCurve_name = map[int32]string{
	0: "SECP256K1",
}

var KeyCurve_value = map[string]int32{
	"SECP256K1": 0,
}

func (x KeyCurve) String() string {
	return proto.EnumName(KeyCurve_name, int32(x))
}

func (KeyCurve) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d591696710d15b62, []int{1}
}

type Key struct {
	KeyBytes             []byte   `protobuf:"bytes,1,opt,name=key_bytes,json=keyBytes,proto3" json:"key_bytes,omitempty"`
	Type                 KeyType  `protobuf:"varint,2,opt,name=type,proto3,enum=eckey.KeyType" json:"type,omitempty"`
	Curve                KeyCurve `protobuf:"varint,3,opt,name=curve,proto3,enum=eckey.KeyCurve" json:"curve,omitempty"`
	Compressed           bool     `protobuf:"varint,4,opt,name=compressed,proto3" json:"compressed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Key) Reset()         { *m = Key{} }
func (m *Key) String() string { return proto.CompactTextString(m) }
func (*Key) ProtoMessage()    {}
func (*Key) Descriptor() ([]byte, []int) {
	return fileDescriptor_d591696710d15b62, []int{0}
}
func (m *Key) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Key.Unmarshal(m, b)
}
func (m *Key) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Key.Marshal(b, m, deterministic)
}
func (m *Key) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Key.Merge(m, src)
}
func (m *Key) XXX_Size() int {
	return xxx_messageInfo_Key.Size(m)
}
func (m *Key) XXX_DiscardUnknown() {
	xxx_messageInfo_Key.DiscardUnknown(m)
}

var xxx_messageInfo_Key proto.InternalMessageInfo

func (m *Key) GetKeyBytes() []byte {
	if m != nil {
		return m.KeyBytes
	}
	return nil
}

func (m *Key) GetType() KeyType {
	if m != nil {
		return m.Type
	}
	return KeyType_ELLIPTIC
}

func (m *Key) GetCurve() KeyCurve {
	if m != nil {
		return m.Curve
	}
	return KeyCurve_SECP256K1
}

func (m *Key) GetCompressed() bool {
	if m != nil {
		return m.Compressed
	}
	return false
}

func init() {
	proto.RegisterEnum("eckey.KeyType", KeyType_name, KeyType_value)
	proto.RegisterEnum("eckey.KeyCurve", KeyCurve_name, KeyCurve_value)
	proto.RegisterType((*Key)(nil), "eckey.Key")
}

func init() { proto.RegisterFile("eckey.proto", fileDescriptor_d591696710d15b62) }

var fileDescriptor_d591696710d15b62 = []byte{
	// 205 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x8f, 0xc1, 0x4a, 0x86, 0x40,
	0x14, 0x85, 0xff, 0xc9, 0xb1, 0xc6, 0x9b, 0x99, 0xcc, 0xa6, 0x81, 0x20, 0x44, 0x10, 0xc4, 0x85,
	0x90, 0x51, 0x0f, 0x90, 0xb8, 0x10, 0x5d, 0xc8, 0xe4, 0x3e, 0xd0, 0xee, 0x4a, 0xc2, 0x41, 0x2d,
	0xb8, 0x0f, 0xd1, 0x3b, 0x87, 0x63, 0x51, 0xcb, 0xef, 0x9c, 0xc3, 0x07, 0x07, 0x2e, 0x71, 0x9c,
	0x90, 0x72, 0xb3, 0xcc, 0xdb, 0x2c, 0x5d, 0x0b, 0xf1, 0x17, 0x03, 0xa7, 0x41, 0x92, 0xb7, 0xe0,
	0x4d, 0x48, 0xaf, 0x03, 0x6d, 0xb8, 0x2a, 0x16, 0xb1, 0xd4, 0xd7, 0x62, 0x42, 0x7a, 0xde, 0x59,
	0xc6, 0xc0, 0x37, 0x32, 0xa8, 0xce, 0x22, 0x96, 0x06, 0x45, 0x90, 0x1f, 0x9e, 0x06, 0xa9, 0x27,
	0x83, 0xda, 0x76, 0x32, 0x01, 0x77, 0xfc, 0x58, 0x3e, 0x51, 0x39, 0x76, 0x74, 0xfd, 0x37, 0x2a,
	0xf7, 0x58, 0x1f, 0xad, 0xbc, 0x03, 0x18, 0xe7, 0x77, 0xb3, 0xe0, 0xba, 0xe2, 0x9b, 0xe2, 0x11,
	0x4b, 0x85, 0xfe, 0x97, 0x64, 0x37, 0x70, 0xf1, 0xe3, 0x95, 0x3e, 0x88, 0xaa, 0x6d, 0xeb, 0xae,
	0xaf, 0xcb, 0xf0, 0x94, 0x25, 0x20, 0x7e, 0x5d, 0xf2, 0x0a, 0xbc, 0x97, 0xaa, 0xec, 0x8a, 0xc7,
	0xa7, 0xe6, 0x3e, 0x3c, 0xc5, 0x5c, 0xb0, 0x90, 0x65, 0x7c, 0xe7, 0xe1, 0xdc, 0xbe, 0x7b, 0xf8,
	0x0e, 0x00, 0x00, 0xff, 0xff, 0x7e, 0xfe, 0x6e, 0x27, 0xec, 0x00, 0x00, 0x00,
}
